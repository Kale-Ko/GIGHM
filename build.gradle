plugins {
    id 'java'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.toVersion(project.java_version)
targetCompatibility = JavaVersion.toVersion(project.java_version)

archivesBaseName = "gighm"
group = "io.github.kale_ko"
version = project.project_version

configurations {
    depencancy
    depencancy.canBeResolved = true

    implementation {
        extendsFrom depencancy
    }
}

repositories {
    mavenCentral()
}

dependencies {
    depencancy platform("org.lwjgl:lwjgl-bom:${project.lwjgl_version}")
    depencancy "org.lwjgl:lwjgl"
    depencancy "org.lwjgl:lwjgl-opengl"
    depencancy "org.lwjgl:lwjgl-glfw"
    // depencancy "org.lwjgl:lwjgl-openal"

    project.lwjgl_natives.split(",").each {
        depencancy "org.lwjgl:lwjgl::${it}"
        depencancy "org.lwjgl:lwjgl-opengl::${it}"
        depencancy "org.lwjgl:lwjgl-glfw::${it}"
        // depencancy "org.lwjgl:lwjgl-openal::${it}"
    }

    depencancy "org.joml:joml:${project.joml_version}"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
    destinationDirectory = file("./")
    archiveFileName = "${project.name}-${project.version}.jar"
}

tasks.register("buildFat", Jar) {
    dependsOn tasks.build

    sourceCompatibility = JavaVersion.toVersion(project.java_version)
    targetCompatibility = JavaVersion.toVersion(project.java_version)

    duplicatesStrategy = "exclude"
    destinationDirectory = file("./")
    archiveFileName = "${project.name}-${project.version}-fat.jar"
    classifier = "fat"

    from files(project.sourceSets.main.output)
    from files(project.configurations.depencancy.collect { it.isDirectory() ? it : zipTree(it) })
}

tasks.register("buildSources", Jar) {
    dependsOn tasks.build

    duplicatesStrategy = "exclude"
    destinationDirectory = file("./")
    archiveFileName = "${project.name}-${project.version}-sources.jar"
    classifier = "sources"

    from sourceSets.main.allJava
}

tasks.register("genJavaDocs", Javadoc) {
    dependsOn tasks.build

    source = sourceSets.main.allJava
    classpath = sourceSets.main.runtimeClasspath

    title = project.name + " " + project.version

    mkdir "./build"
    mkdir "./build/docs"
    file("./build/docs/overview.html").text = "<html><body><p class=\"overview\">" + project.project_description + "</p></body></html>"

    options {
        overview "build/docs/overview.html"
        encoding "utf-8"
    }

    exclude "**/tests/*.java"
}

tasks.register("buildJavaDocs", Jar) {
    dependsOn tasks.genJavaDocs

    duplicatesStrategy = "exclude"
    destinationDirectory = file("./")
    archiveFileName = "${project.name}-${project.version}-javadoc.jar"
    classifier = "javadoc"

    from tasks.genJavaDocs
}

tasks.register("buildAll") {
    dependsOn tasks.jar
    dependsOn tasks.buildFat
    dependsOn tasks.buildSources
    dependsOn tasks.buildJavaDocs

    doLast {
        fileTree(project.projectDir).visit(details -> {
            if (details.file.path.replace("\\", "/").startsWith(project.projectDir.getPath().replace("\\", "/") + "/GIGHM-")) {
                def isCurrent = false

                tasks.buildAll.dependsOn.each {
                    it.outputs.files.each {
                        if (details.file.equals(it)) {
                            isCurrent = true
                        }
                    }
                }

                if (!isCurrent) {
                    delete(details.file.path)
                }
            }
        })
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Kale-Ko/GIGHM")

            credentials {
                username = "Kale-Ko"
                password = System.getenv("GH_PACKAGES_TOKEN")
            }
        }
    }

    publications {
        ghp(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            artifact tasks.jar
            artifact tasks.buildFat
            artifact tasks.buildJavaDocs
            artifact tasks.buildSources

            pom.withXml {
                def node = asNode()

                def packagingNode = node.appendNode("packaging", "jar")

                def licenseNode = node.appendNode("licenses").appendNode("license")
                licenseNode.appendNode("name", "MIT")
                licenseNode.appendNode("url", "https://opensource.org/licenses/MIT")

                def developerNode = node.appendNode("developers").appendNode("developer")
                developerNode.appendNode("id", "kale-ko")
                developerNode.appendNode("name", "Kale Ko")
                developerNode.appendNode("url", "https://kaleko.ga/")
                developerNode.appendNode("email", "contact@kaleko.ga")

                def scmNode = node.appendNode("scm")
                scmNode.appendNode("connection", "scm:git:git@github.com:Kale-Ko/GIGHM.git")
                scmNode.appendNode("developerConnection", "scm:git:git@github.com:Kale-Ko/GIGHM.git")
                scmNode.appendNode("tag", "master")
                scmNode.appendNode("url", "https://github.com/Kale-Ko/GIGHM")

                def dependenciesNode = node.appendNode("dependencies")

                configurations.depencancy.resolvedConfiguration.getFirstLevelModuleDependencies().each {
                    def depend = it

                    def dep = dependenciesNode.appendNode("dependency")
                    dep.appendNode("groupId", it.moduleGroup)
                    dep.appendNode("artifactId", it.moduleName)
                    dep.appendNode("version", it.moduleVersion)

                    if (it.moduleGroup == "org.lwjgl" && it.moduleName != "lwjgl-bom") {
                        project.lwjgl_natives.split(",").each {
                            dep = dependenciesNode.appendNode("dependency")
                            dep.appendNode("groupId", depend.moduleGroup)
                            dep.appendNode("artifactId", depend.moduleName)
                            dep.appendNode("version", depend.moduleVersion)
                            dep.appendNode("classifier", it) 
                        }
                    }
                }
            }
        }
    }
}